
function px() {
    if [[ ! -d ~/.px ]]
    then
        mkdir ~/.px
    fi
    px_home=$(\ls -d ~/.px)

    command="$1"
    case "$command" in
        (set)
            __px_set $2
            ;;

        (add)
            __px_add $2
            ;;

        (activate)
            __px_activate $2
            ;;

        (deactivate)
            __px_deactivate $2
            ;;

        (use)
            __px_use $2
            ;;

        (list)
            __px_list
            ;;
        

        (help)
            __px_usage
            ;;

        (*)
            if [[ -z "$1" ]]; then
                __px_usage
            else
                echo "Command \"$command\" is not reconized."
            fi
            ;;
    esac
}

function __px_usage() {
    tee <<'EOF'

px list

px set rakudo
px add ~/perl6/rakudo-star-2012.06/bin
px add ~/perl6/rakudo-star-2012.07/bin

px set perl5
px add ~/perl5/perl-5.16/bin
px add ~/perl5/perl-5.17/bin

# px activate = prepend to $PATH
px set rakudo
px activate rakudo-star-2012.06
px activate rakudo-star-2012.07
px activate 2012.07

# px deactivate = remove from $PATH
px set rakudo
px deactivate rakudo-star-2012.06

# use = activae one, deactivate others in the same set.
px set rakudo
px use rakudo-star-2012.08 # implies deactivate the currently activated item in rakudo set
px use rakudo-star-2012.07

EOF
}

function __px_set() {
    local name=$1
    if [[ -z "$name" ]]
    then
        echo "Need a name"
        return
    fi

    px_selected_set=$name

    echo "px: [$px_selected_set] selected"
}

function __px_add() {
    local bin=$1
    
    if [[ (-z "$bin") || (! -d "$bin") ]]
    then
        echo "Need a bin/ dir"
        return
    fi
    
    if [[ -z "$px_selected_set" ]]
    then
        echo "Need to select set: px set rakudo"
        return
    fi

    mkdir -p ~/.px/sets

    bin=$(\ls -d $bin)
    echo $bin >> ~/.px/sets/${px_selected_set}
    echo "px: [$px_selected_set] added $bin"
}

function __px_activate() {
    local name=$1
    if [[ -z "$name" ]]
    then
        echo "Need a name"
        return
    fi

    if [[ -z "$px_selected_set" ]]
    then
        echo "Need to select set: px set rakudo"
        return
    fi

    local p=""
    for p in $(\cat ~/.px/sets/${px_selected_set} | \grep $name)
    do
        echo "Activate: $p"
        export PATH=$PATH:$p
    done

    hash -r
}

function __px_deactivate() {
    local name=$1
    if [[ -z "$name" ]]
    then
        echo "Need a name"
        return
    fi

    if [[ -z "$px_selected_set" ]]
    then
        echo "Need to select set: px set rakudo"
        return
    fi

    local p=""
    local pp=$PATH
    for p in $(\cat ~/.px/sets/${px_selected_set} | \grep $name)
    do
        pp=$(echo $pp|\perl -lne "chomp; print join ':',grep { \$_ ne '$p' } split /:/, \$_")
        echo "px: [$px_selected_set] deactivate $p"
    done

    export PATH=$pp
    hash -r
}

function __px_list() {
    for set in ~/.px/sets/*
    do
        echo "# ["$(basename $set)"]"
        cat $set
        echo
    done
}

function __px_use() {
    local name=$1
    if [[ -z "$name" ]]
    then
        echo "Need a name"
        return
    fi

    if [[ -z "$px_selected_set" ]]
    then
        echo "Need to select set: px set rakudo"
        return
    fi


    local p=""
    for p in $(\cat ~/.px/sets/${px_selected_set})
    do
        __px_deactivate "$p"
    done

    __px_activate "$name"

    hash -r
}
